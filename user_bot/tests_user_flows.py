import pytest
import pytest_asyncio  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã @pytest.mark.asyncio
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

# –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ aiogram test utilities –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
# –ù–∏–∂–µ ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-–±–æ—Ç —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É bot_tester –∏–∑ conftest.py

@pytest.mark.asyncio
async def test_start_command(bot_tester):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    response = await bot_tester.send_message('/start')
    assert '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å' in response.text

@pytest.mark.asyncio
async def test_apply_flow(bot_tester):
    """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –¥–Ω—è, —Å–ª–æ—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    response = await bot_tester.send_message('üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥' in response.text

    city_button = response.get_inline_keyboard()[0]
    response = await bot_tester.click_button(city_button)
    assert '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è' in response.text

    slot_button = response.get_inline_keyboard()[0]
    response = await bot_tester.click_button(slot_button)
    assert '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏' in response.text

    confirm_button = response.get_inline_keyboard()[0]
    response = await bot_tester.click_button(confirm_button)
    assert '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' in response.text
    assert '–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' in response.text

@pytest.mark.asyncio
async def test_repeat_application(bot_tester):
    # –ü–æ–¥–∞—ë–º –∑–∞—è–≤–∫—É
    await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    await bot_tester.send_message('–ú–æ—Å–∫–≤–∞')
    await bot_tester.send_message('18:00')
    await bot_tester.send_message('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∞—Ç—å –µ—â—ë —Ä–∞–∑
    response = await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞' in response.text.lower()
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É
    response = await bot_tester.send_message('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')
    assert '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' in response.text
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Å–Ω–æ–≤–∞
    response = await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥' in response.text

@pytest.mark.asyncio
async def test_cancel_application(bot_tester):
    await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    await bot_tester.send_message('–ú–æ—Å–∫–≤–∞')
    await bot_tester.send_message('18:00')
    await bot_tester.send_message('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    response = await bot_tester.send_message('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')
    assert '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' in response.text
    response = await bot_tester.send_message('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')
    assert '–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫' in response.text.lower()

@pytest.mark.asyncio
async def test_meetings_add_and_cancel(bot_tester):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∫–æ–º–∞–Ω–¥—É
    await bot_tester.send_message('_add_meeting –ú–æ—Å–∫–≤–∞ 2024-06-10 18:00')
    await bot_tester.send_message('_add_meeting –ü–∏—Ç–µ—Ä 2024-06-15 19:00')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–ú–æ—Å–∫–≤–∞' in response.text and '–ü–∏—Ç–µ—Ä' in response.text
    # –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á—É
    cancel_btn = response.get_inline_keyboard()[0]
    response = await bot_tester.click_button(cancel_btn)
    assert '–í—ã —É–≤–µ—Ä–µ–Ω—ã' in response.text
    response = await bot_tester.click_button('–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å')
    assert '–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' in response.text
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–ú–æ—Å–∫–≤–∞' not in response.text
    # –û—á–∏—â–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏
    response = await bot_tester.send_message('_clear_meetings')
    assert '–æ—á–∏—â–µ–Ω—ã' in response.text
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–Ω–µ—Ç –≤—Å—Ç—Ä–µ—á' in response.text.lower()

@pytest.mark.asyncio
async def test_profile_edit(bot_tester):
    response = await bot_tester.send_message('–ü—Ä–æ—Ñ–∏–ª—å')
    assert '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å' in response.text
    response = await bot_tester.click_button('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
    assert '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è' in response.text
    response = await bot_tester.send_message('–ü—ë—Ç—Ä')
    assert '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é' in response.text
    response = await bot_tester.send_message('–ü–µ—Ç—Ä–æ–≤')
    assert '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç' in response.text
    response = await bot_tester.send_message('35')
    assert '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' in response.text
    response = await bot_tester.send_message('–ü—Ä–æ—Ñ–∏–ª—å')
    assert '–ü—ë—Ç—Ä' in response.text and '–ü–µ—Ç—Ä–æ–≤' in response.text and '35' in response.text

@pytest.mark.asyncio
async def test_reset_state(bot_tester):
    await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    await bot_tester.send_message('–ú–æ—Å–∫–≤–∞')
    await bot_tester.send_message('18:00')
    await bot_tester.send_message('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    await bot_tester.send_message('_add_meeting –ú–æ—Å–∫–≤–∞ 2024-06-10 18:00')
    response = await bot_tester.send_message('_reset')
    assert '—Å–±—Ä–æ—à–µ–Ω–æ' in response.text.lower()
    response = await bot_tester.send_message('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')
    assert '–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫' in response.text.lower()
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–Ω–µ—Ç –≤—Å—Ç—Ä–µ—á' in response.text.lower()

@pytest.mark.asyncio
async def test_meetings_list(bot_tester):
    await bot_tester.send_message('_add_meeting –ú–æ—Å–∫–≤–∞ 2024-06-10 18:00')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏' in response.text
    keyboard = response.get_inline_keyboard()
    assert any('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É' in btn for btn in keyboard)
    assert '–ù–∞–∑–∞–¥' in keyboard

@pytest.mark.asyncio
async def test_meetings_empty(bot_tester):
    await bot_tester.send_message('_clear_meetings')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert '–Ω–µ—Ç –≤—Å—Ç—Ä–µ—á' in response.text.lower()
    assert '–ù–∞–∑–∞–¥' in response.get_inline_keyboard()

@pytest.mark.asyncio
async def test_no_cities(bot_tester):
    """–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ ‚Äî –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."""
    bot_tester.cities_available = False
    response = await bot_tester.send_message('üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤' in response.text.lower()
    assert any('–º–µ–Ω—é' in btn.lower() for btn in response.get_inline_keyboard())
    # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–í –º–µ–Ω—é" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu_btn = next(btn for btn in response.get_inline_keyboard() if '–º–µ–Ω—é' in btn.lower())
    response = await bot_tester.click_button(menu_btn)
    assert '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.text.lower()

@pytest.mark.asyncio
async def test_no_slots(bot_tester):
    """–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ‚Äî –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."""
    bot_tester.cities_available = True
    bot_tester.slots_available = False
    response = await bot_tester.send_message('üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    city_btn = response.get_inline_keyboard()[0]
    response = await bot_tester.click_button(city_btn)
    assert '–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤' in response.text.lower()
    assert any('–º–µ–Ω—é' in btn.lower() for btn in response.get_inline_keyboard())
    menu_btn = next(btn for btn in response.get_inline_keyboard() if '–º–µ–Ω—é' in btn.lower())
    response = await bot_tester.click_button(menu_btn)
    assert '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.text.lower()

@pytest.mark.asyncio
async def test_status_check(bot_tester):
    await bot_tester.send_message('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    await bot_tester.send_message('–ú–æ—Å–∫–≤–∞')
    await bot_tester.send_message('18:00')
    await bot_tester.send_message('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    response = await bot_tester.send_message('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')
    assert 'pending' in response.text or '–æ–∂–∏–¥–∞–Ω–∏–µ' in response.text.lower()

@pytest.mark.asyncio
async def test_receive_notification(bot_tester):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."""
    response = await bot_tester.send_message('simulate_admin_action:approve')
    assert response.text

@pytest.mark.asyncio
async def test_feedback_flow(bot_tester):
    await bot_tester.send_message('_add_meeting –ú–æ—Å–∫–≤–∞ 2024-06-01 18:00 past')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    feedback_btn = next(btn for btn in response.get_inline_keyboard() if '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' in btn)
    response = await bot_tester.click_button(feedback_btn)
    assert '–æ—Ü–µ–Ω–∫—É' in response.text
    response = await bot_tester.click_button('5')
    assert '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' in response.text
    response = await bot_tester.send_message('–û—Ç–ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞!')
    assert '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤' in response.text
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    feedback_btns = [btn for btn in response.get_inline_keyboard() if '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' in btn]
    assert not feedback_btns
    response = await bot_tester.send_message('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ 1')
    assert '—É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏' in response.text

@pytest.mark.asyncio
async def test_feedback_skip_comment(bot_tester):
    await bot_tester.send_message('_add_meeting –ü–∏—Ç–µ—Ä 2024-06-02 19:00 past')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    feedback_btn = next(btn for btn in response.get_inline_keyboard() if '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' in btn)
    response = await bot_tester.click_button(feedback_btn)
    response = await bot_tester.click_button('4')
    response = await bot_tester.click_button('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    assert '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤' in response.text

@pytest.mark.asyncio
async def test_feedback_only_for_past(bot_tester):
    await bot_tester.send_message('_add_meeting –ö–∞–∑–∞–Ω—å 2024-07-01 18:00')
    response = await bot_tester.send_message('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏')
    assert not any('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' in btn for btn in response.get_inline_keyboard())
    response = await bot_tester.send_message('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ 2')
    assert '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in response.text or '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' in response.text

@pytest.mark.asyncio
async def test_unknown_command(bot_tester):
    response = await bot_tester.send_message('abrakadabra')
    assert '–Ω–µ –ø–æ–Ω—è–ª' in response.text.lower()
    assert '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.get_inline_keyboard()

@pytest.mark.asyncio
async def test_invalid_feedback(bot_tester):
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É
    response = await bot_tester.send_message('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ 999')
    assert '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in response.text or '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' in response.text or '–Ω–µ –ø–æ–Ω—è–ª' in response.text
    assert '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.get_inline_keyboard() or '–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏' in response.get_inline_keyboard()

@pytest.mark.asyncio
async def test_menu_always_available(bot_tester):
    # –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot_tester.send_message('abrakadabra')
    response = await bot_tester.send_message('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    assert '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.text
    assert '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in response.get_inline_keyboard()

@pytest.mark.asyncio
async def test_apply_unregistered_user(bot_tester):
    """–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É."""
    bot_tester.is_registered = False
    response = await bot_tester.send_message('üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' in response.text.lower()

@pytest.mark.asyncio
async def test_apply_not_approved_user(bot_tester):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ-"approved" —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É."""
    bot_tester.is_registered = True
    bot_tester.is_approved = False
    response = await bot_tester.send_message('üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    assert '–Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞' in response.text.lower() or '–æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' in response.text.lower()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏ —Ç.–¥. –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. 
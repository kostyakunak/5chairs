import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_active_cities, get_active_timeslots, get_or_create_application, get_user_application, pool, get_user
from user_bot.handlers.start import get_main_menu
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∑–∞–≥–ª—É—à–∫–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
# from database.db import get_cities, get_time_slots, create_application, get_user_application, cancel_application

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
class ApplicationStates(StatesGroup):
    select_city = State()
    select_timeslot = State()
    confirm = State()
    status = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
async def cancel_application(user_id):
    async with pool.acquire() as conn:
        await conn.execute("""
            UPDATE applications SET status = 'cancelled' WHERE user_id = $1 AND status = 'pending'
        """, user_id)

# –°—Ç–∞—Ä—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: Message, state: FSMContext, is_callback: bool = False):
    user_id = message.from_user.id
    user = await get_user(user_id)
    logger.info(f"start_application: user_id={user_id}")
    logger.info(f"start_application: get_user({user_id}) -> {user}")
    if not user:
        msg = await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        await state.update_data(last_private_message_id=msg.message_id)
        return
    logger.info(f"start_application: user['status'] = {user.get('status')}")
    if user["status"] == "rejected":
        msg = await message.answer("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.update_data(last_private_message_id=msg.message_id)
        return
    try:
        cities = await get_active_cities()
        if not cities:
            builder = InlineKeyboardBuilder()
            builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            if is_callback:
                msg = await message.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.", reply_markup=builder.as_markup())
            else:
                msg = await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.", reply_markup=builder.as_markup())
            await state.update_data(last_private_message_id=msg.message_id)
            return
        builder = InlineKeyboardBuilder()
        for city in cities:
            builder.button(text=city["name"], callback_data=f"app_city_{city['id']}")
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        if is_callback:
            msg = await message.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=builder.as_markup())
        else:
            msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        await state.set_state(ApplicationStates.select_city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        if is_callback:
            msg = await message.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            msg = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.update_data(last_private_message_id=msg.message_id)

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@router.callback_query(ApplicationStates.select_city, F.data.startswith("app_city_"))
async def select_city(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[-1])
    await state.update_data(city_id=city_id)
    try:
        timeslots = await get_active_timeslots()
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        filtered = [ts for ts in timeslots if ts["city_id"] == city_id]
        if not filtered:
            builder = InlineKeyboardBuilder()
            builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", reply_markup=builder.as_markup())
            return
        builder = InlineKeyboardBuilder()
        for slot in filtered:
            label = f"{slot['day_of_week']} {slot['start_time'].strftime('%H:%M')}"
            builder.button(text=label, callback_data=f"app_slot_{slot['id']}")
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=builder.as_markup())
        await state.set_state(ApplicationStates.select_timeslot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
@router.callback_query(ApplicationStates.select_timeslot, F.data.startswith("app_slot_"))
async def select_timeslot(callback: CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split("_")[-1])
    await state.update_data(timeslot_id=slot_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_confirm")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_slot")
    builder.adjust(1)
    msg = await callback.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏:", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)
    await state.set_state(ApplicationStates.confirm)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(ApplicationStates.confirm, F.data == "app_confirm")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_id = data.get("city_id")
    timeslot_id = data.get("timeslot_id")
    user_id = callback.from_user.id
    try:
        # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É (–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é) –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        await get_or_create_application(user_id, timeslot_id)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–∞
        async with pool.acquire() as conn:
            city = await conn.fetchrow('SELECT name FROM cities WHERE id = $1', city_id)
            slot = await conn.fetchrow('SELECT day_of_week, start_time FROM time_slots WHERE id = $1', timeslot_id)
        city_name = city['name'] if city else '-'
        day_of_week = slot['day_of_week'] if slot else '-'
        time_str = slot['start_time'].strftime('%H:%M') if slot and slot['start_time'] else '-'
        text = (
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ì–æ—Ä–æ–¥: {city_name}\n"
            f"–í—Ä–µ–º—è: {day_of_week} {time_str}\n"
            "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        await state.set_state(ApplicationStates.status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏
@router.message(F.text == "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def view_my_application(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        application = await get_user_application(user_id)
        if application:
            text = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n–ì–æ—Ä–æ–¥: {application['city_name']}\n"
                f"–í—Ä–µ–º—è: {application['day_of_week']} {application['time'].strftime('%H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {application['status']}"
            )
            builder = InlineKeyboardBuilder()
            if application["status"] == "pending":
                builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_cancel")
            builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            await message.answer(text, reply_markup=builder.as_markup())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "app_cancel")
async def cancel_my_application(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        await cancel_application(user_id)
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
@router.callback_query(F.data == "main_menu")
async def cb_main_menu_application(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ "–ª–∏—á–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    msg_id = data.get("last_private_message_id")
    if msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
        await state.update_data(last_private_message_id=None)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.message(Command("apply"))
async def cmd_apply(message: Message, state: FSMContext):
    # ... –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Å–ª–æ—Ç–∞ ...
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

@router.callback_query(F.data.startswith("confirm_application_"))
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    # ... –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ...
    msg = await callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

@router.callback_query(F.data == "cancel_application")
async def cancel_application(callback: CallbackQuery, state: FSMContext):
    # ... –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ ...
    msg = await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

@router.message(Command("application_status"))
async def show_application_status(message: Message, state: FSMContext):
    # ... –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ...
    msg = await message.answer("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: ...", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 'app_back_slot'
@router.callback_query(ApplicationStates.confirm, F.data == "app_back_slot")
async def back_to_slot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_id = data.get("city_id")
    try:
        timeslots = await get_active_timeslots()
        filtered = [ts for ts in timeslots if ts["city_id"] == city_id]
        builder = InlineKeyboardBuilder()
        for slot in filtered:
            label = f"{slot['day_of_week']} {slot['start_time'].strftime('%H:%M')}"
            builder.button(text=label, callback_data=f"app_slot_{slot['id']}")
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        await state.set_state(ApplicationStates.select_timeslot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ª–æ—Ç–∞–º: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
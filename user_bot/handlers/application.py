import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_active_cities, get_active_timeslots, get_or_create_application, get_user_application, pool, get_user

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∑–∞–≥–ª—É—à–∫–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
# from database.db import get_cities, get_time_slots, create_application, get_user_application, cancel_application

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
class ApplicationStates(StatesGroup):
    select_city = State()
    select_timeslot = State()
    confirm = State()
    status = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
async def cancel_application(user_id):
    async with pool.acquire() as conn:
        await conn.execute("""
            UPDATE applications SET status = 'cancelled' WHERE user_id = $1 AND status = 'pending'
        """, user_id)

# –°—Ç–∞—Ä—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return
    if user["status"] != "approved":
        await message.answer("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    try:
        cities = await get_active_cities()
        if not cities:
            builder = InlineKeyboardBuilder()
            builder.button(text="–í –º–µ–Ω—é", callback_data="app_back_main")
            builder.adjust(1)
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.", reply_markup=builder.as_markup())
            return
        builder = InlineKeyboardBuilder()
        for city in cities:
            builder.button(text=city["name"], callback_data=f"app_city_{city['id']}")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_main")
        builder.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=builder.as_markup())
        await state.set_state(ApplicationStates.select_city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@router.callback_query(ApplicationStates.select_city, F.data.startswith("app_city_"))
async def select_city(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[-1])
    await state.update_data(city_id=city_id)
    try:
        timeslots = await get_active_timeslots()
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        filtered = [ts for ts in timeslots if ts["city_id"] == city_id]
        if not filtered:
            builder = InlineKeyboardBuilder()
            builder.button(text="–í –º–µ–Ω—é", callback_data="app_back_main")
            builder.adjust(1)
            await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", reply_markup=builder.as_markup())
            return
        builder = InlineKeyboardBuilder()
        for slot in filtered:
            label = f"{slot['day_of_week']} {slot['start_time'].strftime('%H:%M')}"
            builder.button(text=label, callback_data=f"app_slot_{slot['id']}")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_city")
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=builder.as_markup())
        await state.set_state(ApplicationStates.select_timeslot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "app_back_main")
async def back_to_main_from_anywhere(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await state.clear()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
@router.callback_query(ApplicationStates.select_timeslot, F.data.startswith("app_slot_"))
async def select_timeslot(callback: CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split("_")[-1])
    await state.update_data(timeslot_id=slot_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_confirm")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_slot")
    builder.adjust(1)
    await callback.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏:", reply_markup=builder.as_markup())
    await state.set_state(ApplicationStates.confirm)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
@router.callback_query(ApplicationStates.select_timeslot, F.data == "app_back_city")
async def back_to_city(callback: CallbackQuery, state: FSMContext):
    await start_application(callback.message, state)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(ApplicationStates.confirm, F.data == "app_confirm")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_id = data.get("city_id")
    timeslot_id = data.get("timeslot_id")
    user_id = callback.from_user.id
    try:
        # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É (–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
        await get_or_create_application(user_id)
        builder = InlineKeyboardBuilder()
        builder.button(text="–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data="app_status")
        builder.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="app_back_main")
        builder.adjust(1)
        await callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=builder.as_markup())
        await state.set_state(ApplicationStates.status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏" –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏
@router.callback_query(F.data == "app_status")
async def show_application_status(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    application = await get_user_application(user_id)
    if application:
        text = (
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n–ì–æ—Ä–æ–¥: {application['city_name']}\n"
            f"–í—Ä–µ–º—è: {application['day_of_week']} {application['time'].strftime('%H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {application['status']}"
        )
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="app_back_main")
    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(ApplicationStates.confirm, F.data == "app_back_slot")
async def back_to_slot(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_id = data.get("city_id")
    try:
        timeslots = await get_active_timeslots()
        filtered = [ts for ts in timeslots if ts["city_id"] == city_id]
        builder = InlineKeyboardBuilder()
        for slot in filtered:
            label = f"{slot['day_of_week']} {slot['start_time'].strftime('%H:%M')}"
            builder.button(text=label, callback_data=f"app_slot_{slot['id']}")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_city")
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=builder.as_markup())
        await state.set_state(ApplicationStates.select_timeslot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ª–æ—Ç–∞–º: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏
@router.message(F.text == "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def view_my_application(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        application = await get_user_application(user_id)
        if application:
            text = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n–ì–æ—Ä–æ–¥: {application['city_name']}\n"
                f"–í—Ä–µ–º—è: {application['day_of_week']} {application['time'].strftime('%H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {application['status']}"
            )
            builder = InlineKeyboardBuilder()
            if application["status"] == "pending":
                builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_cancel")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="app_back_main")
            builder.adjust(1)
            await message.answer(text, reply_markup=builder.as_markup())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "app_cancel")
async def cancel_my_application(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        await cancel_application(user_id)
        builder = InlineKeyboardBuilder()
        builder.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="app_back_main")
        builder.adjust(1)
        await callback.message.edit_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=builder.as_markup())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta

from database.db import get_user, get_user_meetings, get_meeting_members, get_meeting, pool, remove_meeting_member, get_user_applications
from user_bot.handlers.start import get_main_menu, show_main_menu

# Create router
router = Router()

# Function to register handlers with the dispatcher
def register_meetings_handlers(dp):
    dp.include_router(router)

@router.message(Command("my_meetings"))
async def cmd_meetings(event, state: FSMContext, is_callback: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    if is_callback:
        user_id = event.from_user.id
    else:
        user_id = event.from_user.id
    try:
        applications = await get_user_applications(user_id)
        now = datetime.now()
        upcoming = []
        pending = []
        past = []
        for app in applications:
            slot_dt = None
            if app.get('meeting_date') and app.get('meeting_time'):
                slot_dt = datetime.combine(app['meeting_date'], app['meeting_time'])
            if app['status'] == 'pending':
                pending.append(app)
            elif app['status'] == 'approved':
                if slot_dt and slot_dt < now:
                    past.append(app)
                else:
                    upcoming.append(app)
            elif app['status'] == 'completed':
                past.append(app)
        text = "üìÖ –í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–∞—è–≤–∫–∏:\n\n"
        idx = 1
        for app in pending:
            text += f"{idx}. {app['city_name']}, {app['day_of_week']} {app['time'].strftime('%H:%M')}\n–°—Ç–∞—Ç—É—Å: –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
            idx += 1
        for app in upcoming:
            text += f"{idx}. {app['city_name']}, {app['day_of_week']} {app['time'].strftime('%H:%M')}\n–°—Ç–∞—Ç—É—Å: –æ–¥–æ–±—Ä–µ–Ω–æ\n\n"
            idx += 1
        if past:
            text += "\nüìú –ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n"
            for app in past:
                text += f"- {app['city_name']}, {app['day_of_week']} {app['time'].strftime('%H:%M')}\n"
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        if is_callback:
            msg = await event.message.edit_text(text, reply_markup=builder.as_markup())
        else:
            await event.answer("–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á:", reply_markup=ReplyKeyboardRemove())
            msg = await event.answer(text, reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
    except Exception as e:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á: {str(e)}"
        if is_callback:
            msg = await event.message.edit_text(error_text, reply_markup=builder.as_markup())
        else:
            await event.answer("–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á:", reply_markup=ReplyKeyboardRemove())
            msg = await event.answer(error_text, reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)

# Meeting details handler
@router.callback_query(F.data.startswith("meeting_details_"))
async def show_meeting_details(callback, state: FSMContext):
    meeting_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    try:
        async with pool.acquire() as conn:
            meeting = await conn.fetchrow('''
                SELECT m.*, c.name as city_name, ts.day_of_week, ts.start_time, ts.end_time
                FROM meetings m
                JOIN cities c ON m.city_id = c.id
                LEFT JOIN meeting_time_slots mts ON m.id = mts.meeting_id
                LEFT JOIN time_slots ts ON mts.time_slot_id = ts.id
                WHERE m.id = $1
            ''', meeting_id)
        if not meeting:
            builder = InlineKeyboardBuilder()
            builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            msg = await callback.message.edit_text("–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=builder.as_markup())
            await state.update_data(last_private_message_id=msg.message_id)
            return
        members = await get_meeting_members(meeting_id)
        details = (
            f"üìÖ –í—Å—Ç—Ä–µ—á–∞: {meeting['name']}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {meeting['city_name']} ‚Äî {meeting['venue']}"
        )
        if meeting.get('venue_address'):
            details += f"\nüìå –ê–¥—Ä–µ—Å: {meeting['venue_address']}"
        details += (
            f"\n‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {meeting['meeting_date'].strftime('%A, %d.%m.%Y')} –≤ {meeting['meeting_time'].strftime('%H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {meeting['status'].capitalize()}\n"
        )
        if meeting.get('day_of_week') and meeting.get('start_time') and meeting.get('end_time'):
            details += f"\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç: {meeting['day_of_week']} {meeting['start_time'].strftime('%H:%M')}-{meeting['end_time'].strftime('%H:%M')}"
        meeting_datetime = datetime.combine(meeting['meeting_date'], meeting['meeting_time'])
        now = datetime.now()
        if meeting_datetime > now:
            time_until = meeting_datetime - now
            days = time_until.days
            hours, remainder = divmod(time_until.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            details += f"\n\n‚è≥ –î–æ –≤—Å—Ç—Ä–µ—á–∏: {days} –¥–Ω., {hours} —á., {minutes} –º–∏–Ω."
        details += "\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
        if members:
            for i, member in enumerate(members, 1):
                details += f"{i}. {member['name']} {member['surname']}\n"
        else:
            details += "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        details += (
            f"\n\nüìã –ü–æ–≤–µ—Å—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏:\n"
            f"- –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ ice-breakers (15 –º–∏–Ω)\n"
            f"- –ú–µ—Ç–æ–¥ 5 —Å—Ç—É–ª—å–µ–≤ (10 –º–∏–Ω)\n"
            f"- –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è (60 –º–∏–Ω)\n"
            f"- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥—ã (15 –º–∏–Ω)\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 5-10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!"
        )
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥ –∫ –≤—Å—Ç—Ä–µ—á–∞–º",
            callback_data="back_to_meetings"
        ))
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text(
            details,
            reply_markup=builder.as_markup()
        )
        await state.update_data(last_private_message_id=msg.message_id)
    except Exception as e:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤—Å—Ç—Ä–µ—á–∏: {str(e)}", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)

# Back to meetings list handler
@router.callback_query(F.data == "back_to_meetings")
async def back_to_meetings(callback, state: FSMContext):
    """Return to meetings list"""
    # Call the meetings command handler with the callback message
    message = callback.message
    message.from_user = callback.from_user
    await cmd_meetings(message, state, is_callback=True)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("my_meetings"))
async def cmd_my_meetings(message: Message):
    user_id = message.from_user.id
    meetings = await get_user_meetings(user_id)
    if not meetings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.")
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup())

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data.startswith("cancel_meeting_"))
async def confirm_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –≤—ã–π—Ç–∏", callback_data=f"do_cancel_meeting_{meeting_id}")
    builder.button(text="–ù–µ—Ç", callback_data="cancel_cancel_meeting")
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–µ id={meeting_id}?",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_private_message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data.startswith("do_cancel_meeting_"))
async def do_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await remove_meeting_member(meeting_id, user_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –≤—Å—Ç—Ä–µ—á–∏.", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)
    meetings = await get_user_meetings(user_id)
    if not meetings:
        msg2 = await callback.message.answer("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg2.message_id)
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder2 = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder2.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder2.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder2.adjust(1)
    msg3 = await callback.message.answer(text, reply_markup=builder2.as_markup())
    await state.update_data(last_private_message_id=msg3.message_id)

# –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã (–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É)
@router.callback_query(F.data == "cancel_cancel_meeting")
async def cancel_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    meetings = await get_user_meetings(user_id)
    if not meetings:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

@router.callback_query(F.data.startswith("leave_feedback_"))
async def leave_feedback(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await state.update_data(feedback_meeting_id=meeting_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1 ‚Äî –ø–ª–æ—Ö–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ):",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_private_message_id=msg.message_id)

@router.message(lambda message, state: state.get_state() == "feedback_rating")
async def get_feedback_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text.strip())
        if rating < 1 or rating > 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            return
        await state.update_data(feedback_rating=rating)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—Å—Ç—Ä–µ—á–µ:")
        await state.set_state("feedback_comment")
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

@router.message(lambda message, state: state.get_state() == "feedback_comment")
async def get_feedback_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    meeting_id = data.get("feedback_meeting_id")
    rating = data.get("feedback_rating")
    comment = message.text.strip()
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –ë–î, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await save_meeting_feedback(meeting_id, user_id, rating, comment)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=builder.as_markup())
    await state.clear()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
@router.callback_query(F.data == "main_menu")
async def cb_main_menu_meetings(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ "–ª–∏—á–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    msg_id = data.get("last_private_message_id")
    if msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
        await state.update_data(last_private_message_id=None)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await show_main_menu(callback.message, state)
    await state.clear()
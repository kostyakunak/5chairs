from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta

from database.db import get_user, get_user_meetings, get_meeting_members, get_meeting, pool, remove_meeting_member, get_user_applications
from user_bot.handlers.start import get_main_menu, show_main_menu

# Create router
router = Router()

# Function to register handlers with the dispatcher
def register_meetings_handlers(dp):
    dp.include_router(router)

@router.message(Command("my_meetings"))
async def cmd_meetings(event, state: FSMContext, is_callback: bool = False):
    user_id = event.from_user.id if not is_callback else event.from_user.id
    async with pool.acquire() as conn:
        meetings = await conn.fetch(
            '''
            SELECT m.*, c.name as city_name,
                   CASE 
                       WHEN m.venue ~ '^[0-9]+$' THEN 
                           (SELECT v.name FROM venues v WHERE v.id = m.venue::int)
                       ELSE m.venue 
                   END as venue_display
            FROM meetings m
            JOIN meeting_members mm ON m.id = mm.meeting_id
            JOIN cities c ON m.city_id = c.id
            WHERE mm.user_id = $1 AND m.status = 'planned'
            ORDER BY m.meeting_date, m.meeting_time
            ''',
            user_id
        )
    
    builder = InlineKeyboardBuilder()
    
    if not meetings:
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        text = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.\n\n–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É!"
        if is_callback:
            msg = await event.message.edit_text(text, reply_markup=builder.as_markup())
            await state.update_data(last_private_message_id=msg.message_id)
        else:
            msg = await event.answer(text, reply_markup=builder.as_markup())
            await state.update_data(last_private_message_id=msg.message_id)
        return

    for m in meetings:
        venue_name = m['venue_display'] if m['venue_display'] and m['venue_display'] != "-" else "–º–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ
        date_str = m['meeting_date'].strftime('%d.%m')
        time_str = m['meeting_time'].strftime('%H:%M')
        btn_text = f"üìç {date_str}, {time_str}, {venue_name}"
        builder.button(text=btn_text, callback_data=f"meeting_details_{m['id']}")
    
    builder.button(text="üìÖ –ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏", callback_data="past_meetings")
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if is_callback:
        msg = await event.message.edit_text(".", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
    else:
        msg = await event.answer(".", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data.startswith("meeting_details_"))
async def show_meeting_details(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[2])
    async with pool.acquire() as conn:
        meeting = await conn.fetchrow(
            '''
            SELECT m.*, c.name as city_name,
                   CASE 
                       WHEN m.venue ~ '^[0-9]+$' THEN 
                           (SELECT v.name FROM venues v WHERE v.id = m.venue::int)
                       ELSE NULL 
                   END as venue_name
            FROM meetings m
            JOIN cities c ON m.city_id = c.id
            WHERE m.id = $1
            ''',
            meeting_id
        )
    
    if not meeting:
        msg = await callback.message.edit_text("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.update_data(last_private_message_id=msg.message_id)
        return
    
    text = (
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {meeting['city_name']}\n"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    if meeting['venue_name']:
        text += f"üß≠ –ú–µ—Å—Ç–æ: {meeting['venue_name']}\n"
    elif meeting['venue'] and meeting['venue'] != "-":
        text += f"üß≠ –ú–µ—Å—Ç–æ: {meeting['venue']}\n"
    else:
        text += f"üß≠ –ú–µ—Å—Ç–æ: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

# Back to meetings list handler
@router.callback_query(F.data == "back_to_meetings")
async def back_to_meetings(callback, state: FSMContext):
    """Return to meetings list"""
    # Call the meetings command handler with the callback message
    message = callback.message
    message.from_user = callback.from_user
    await cmd_meetings(message, state, is_callback=True)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("my_meetings"))
async def cmd_my_meetings(message: Message):
    user_id = message.from_user.id
    meetings = await get_user_meetings(user_id)
    if not meetings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.")
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup())

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data.startswith("cancel_meeting_"))
async def confirm_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, –≤—ã–π—Ç–∏", callback_data=f"do_cancel_meeting_{meeting_id}")
    builder.button(text="–ù–µ—Ç", callback_data="cancel_cancel_meeting")
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–µ id={meeting_id}?",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_private_message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data.startswith("do_cancel_meeting_"))
async def do_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await remove_meeting_member(meeting_id, user_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –≤—Å—Ç—Ä–µ—á–∏.", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)
    meetings = await get_user_meetings(user_id)
    if not meetings:
        msg2 = await callback.message.answer("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg2.message_id)
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder2 = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder2.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder2.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder2.adjust(1)
    msg3 = await callback.message.answer(text, reply_markup=builder2.as_markup())
    await state.update_data(last_private_message_id=msg3.message_id)

# –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã (–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É)
@router.callback_query(F.data == "cancel_cancel_meeting")
async def cancel_cancel_meeting(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    meetings = await get_user_meetings(user_id)
    if not meetings:
        builder = InlineKeyboardBuilder()
        builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.", reply_markup=builder.as_markup())
        await state.update_data(last_private_message_id=msg.message_id)
        return
    text = "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    builder = InlineKeyboardBuilder()
    for m in meetings:
        text += f"\n{m['meeting_date'].strftime('%d.%m.%Y')} {m['meeting_time'].strftime('%H:%M')} ‚Äî {m['city_name']} (id={m['id']})"
        builder.add(InlineKeyboardButton(
            text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}",
            callback_data=f"cancel_meeting_{m['id']}"
        ))
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

@router.callback_query(F.data.startswith("leave_feedback_"))
async def leave_feedback(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    await state.update_data(feedback_meeting_id=meeting_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    msg = await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1 ‚Äî –ø–ª–æ—Ö–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ):",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_private_message_id=msg.message_id)

@router.message(lambda message, state: state.get_state() == "feedback_rating")
async def get_feedback_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text.strip())
        if rating < 1 or rating > 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            return
        await state.update_data(feedback_rating=rating)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—Å—Ç—Ä–µ—á–µ:")
        await state.set_state("feedback_comment")
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

@router.message(lambda message, state: state.get_state() == "feedback_comment")
async def get_feedback_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    meeting_id = data.get("feedback_meeting_id")
    rating = data.get("feedback_rating")
    comment = message.text.strip()
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –ë–î, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await save_meeting_feedback(meeting_id, user_id, rating, comment)
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=builder.as_markup())
    await state.clear()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏"
@router.callback_query(F.data == "past_meetings")
async def show_past_meetings(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'
    async with pool.acquire() as conn:
        meetings = await conn.fetch(
            '''
            SELECT m.*, c.name as city_name,
                   CASE 
                       WHEN m.venue ~ '^[0-9]+$' THEN 
                           (SELECT v.name FROM venues v WHERE v.id = m.venue::int)
                       ELSE m.venue 
                   END as venue_display
            FROM meetings m
            JOIN meeting_members mm ON m.id = mm.meeting_id
            JOIN cities c ON m.city_id = c.id
            WHERE mm.user_id = $1 AND m.status = 'completed'
            ORDER BY m.meeting_date DESC, m.meeting_time DESC
            ''',
            user_id
        )
    
    builder = InlineKeyboardBuilder()
    
    if not meetings:
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        msg = await callback.message.edit_text(
            "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.\n\n–ö–æ–≥–¥–∞ –≤—ã –ø–æ—Å–µ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—á–∏, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.",
            reply_markup=builder.as_markup()
        )
        await state.update_data(last_private_message_id=msg.message_id)
        return
    
    for m in meetings:
        venue_name = m['venue_display'] if m['venue_display'] and m['venue_display'] != "-" else "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á
        date_str = m['meeting_date'].strftime('%d.%m')
        time_str = m['meeting_time'].strftime('%H:%M')
        btn_text = f"üìç {date_str}, {time_str}, {venue_name}"
        builder.button(text=btn_text, callback_data=f"past_meeting_details_{m['id']}")
    
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    msg = await callback.message.edit_text(".", reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á
@router.callback_query(F.data.startswith("past_meeting_details_"))
async def show_past_meeting_details(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[3])
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
        meeting = await conn.fetchrow(
            '''
            SELECT m.*, c.name as city_name,
                   CASE 
                       WHEN m.venue ~ '^[0-9]+$' THEN 
                           (SELECT v.name FROM venues v WHERE v.id = m.venue::int)
                       ELSE NULL 
                   END as venue_name
            FROM meetings m
            JOIN cities c ON m.city_id = c.id
            WHERE m.id = $1
            ''',
            meeting_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
        participants = await conn.fetch(
            '''
            SELECT u.id, u.name, u.surname 
            FROM meeting_members mm
            JOIN users u ON mm.user_id = u.id
            WHERE mm.meeting_id = $1
            ORDER BY u.name, u.surname
            ''',
            meeting_id
        )
    
    if not meeting:
        msg = await callback.message.edit_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.update_data(last_private_message_id=msg.message_id)
        return
    
    text = (
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {meeting['city_name']}\n"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    if meeting['venue_name']:
        text += f"üß≠ –ú–µ—Å—Ç–æ: {meeting['venue_name']}\n"
    elif meeting['venue'] and meeting['venue'] != "-":
        text += f"üß≠ –ú–µ—Å—Ç–æ: {meeting['venue']}\n"
    else:
        text += f"üß≠ –ú–µ—Å—Ç–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if participants:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}):\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:\n"
        for p in participants:
            btn_text = f"üë§ {p['name']} {p['surname']}"
            builder.button(text=btn_text, callback_data=f"participant_info_{p['id']}_{meeting_id}")
    else:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
    
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data.startswith("participant_info_"))
async def show_participant_info(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = int(parts[2])
    meeting_id = int(parts[3])
    
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await conn.fetchrow(
            '''
            SELECT id, username, name, surname, registration_date
            FROM users 
            WHERE id = $1
            ''',
            user_id
        )
    
    if not user:
        msg = await callback.message.edit_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.update_data(last_private_message_id=msg.message_id)
        return
    
    text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n\n"
    text += f"{user['name']} {user['surname']}\n"
    
    if user['username']:
        text += f"Telegram: @{user['username']}\n"
    else:
        text += f"Telegram: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
    
    if user['registration_date']:
        reg_date = user['registration_date'].strftime('%d.%m.%Y')
        text += f"–í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Å {reg_date}\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–í –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    msg = await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(last_private_message_id=msg.message_id)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
@router.callback_query(F.data == "main_menu")
async def cb_main_menu_meetings(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ "–ª–∏—á–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    msg_id = data.get("last_private_message_id")
    if msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
        await state.update_data(last_private_message_id=None)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )
    await state.clear()
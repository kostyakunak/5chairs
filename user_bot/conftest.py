import pytest
import pytest_asyncio
from copy import deepcopy

class MockResponse:
    def __init__(self, text, keyboard=None):
        self.text = text
        self._keyboard = keyboard or []
    def get_inline_keyboard(self):
        return self._keyboard

class BotTester:
    def __init__(self):
        self.reset()

    def reset(self):
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ "–º–∏–Ω–∏-–ë–î"
        self.profile = {'name': '–ò–≤–∞–Ω', 'surname': '–ò–≤–∞–Ω–æ–≤', 'age': 30}
        self.application = None  # {'city': ..., 'slot': ..., 'status': ...}
        self.meetings = []  # [{'id': ..., 'city': ..., 'date': ..., 'time': ..., 'past': bool}]
        self.next_meeting_id = 1
        self.awaiting_cancel = None
        self.awaiting_meeting_cancel = None
        self.awaiting_feedback = None  # meeting_id, –µ—Å–ª–∏ –∂–¥—ë–º –æ—Ç–∑—ã–≤
        self.awaiting_rating = None
        self.awaiting_comment = None
        self.feedbacks = {}  # meeting_id: {'rating': int, 'comment': str}
        self.is_registered = True
        self.is_approved = True
        self.cities_available = True
        self.slots_available = True

    async def send_message(self, text):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if text in ("/start", "–°—Ç–∞—Ä—Ç", "start"):
            return MockResponse("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 5 Chairs!", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if text in ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–∞–∑–∞–¥"):
            return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
        if text in ("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"):
            if not getattr(self, 'is_registered', True):
                return MockResponse("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
            if not getattr(self, 'is_approved', True):
                return MockResponse("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            if not getattr(self, 'cities_available', True):
                return MockResponse("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.", ["–í –º–µ–Ω—é"])
            if self.application and self.application['status'] == 'pending':
                return MockResponse("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞", ["–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            self.awaiting_city = True
            return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", ["–ú–æ—Å–∫–≤–∞", "–ü–∏—Ç–µ—Ä"])
        if hasattr(self, 'awaiting_city') and self.awaiting_city and text in ("–ú–æ—Å–∫–≤–∞", "–ü–∏—Ç–µ—Ä"):
            if not getattr(self, 'slots_available', True):
                self.awaiting_city = False
                return MockResponse("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", ["–í –º–µ–Ω—é"])
            self.application = {'city': text, 'slot': None, 'status': 'select_slot'}
            self.awaiting_city = False
            self.awaiting_slot = True
            return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", ["18:00", "19:00"])
        if hasattr(self, 'awaiting_slot') and self.awaiting_slot and text in ("18:00", "19:00"):
            self.application['slot'] = text
            self.application['status'] = 'confirm'
            self.awaiting_slot = False
            self.awaiting_confirm = True
            return MockResponse("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏", ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_confirm') and self.awaiting_confirm and text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            self.application['status'] = 'pending'
            self.awaiting_confirm = False
            return MockResponse("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", ["–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É" and self.application and self.application['status'] == 'pending':
            self.application = None
            return MockResponse("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if text == "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏":
            if self.application:
                return MockResponse(f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {self.application['status']}", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            else:
                return MockResponse("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏
        if text in ("–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ üìÖ"):
            if not self.meetings:
                return MockResponse("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á", ["–ù–∞–∑–∞–¥"])
            keyboard = []
            text_lines = ["–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:"]
            for m in self.meetings:
                line = f"{m['date']} {m['time']} ‚Äî {m['city']} (id={m['id']})"
                if m.get('past'):
                    if m['id'] in self.feedbacks:
                        line += " (–æ—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω)"
                    else:
                        keyboard.append(f"–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ {m['id']}")
                else:
                    keyboard.append(f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {m['id']}")
                text_lines.append(line)
            keyboard.append("–ù–∞–∑–∞–¥")
            return MockResponse("\n".join(text_lines), keyboard)
        if text.startswith("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"):
            try:
                meet_id = int(text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id)
                self.awaiting_meeting_cancel = meet_id
                return MockResponse(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {meeting['date']} {meeting['time']} –≤ {meeting['city']}?", ["–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", "–ù–µ—Ç"])
            except Exception:
                return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ["–ù–∞–∑–∞–¥"])
        if text == "–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å" and self.awaiting_meeting_cancel:
            self.meetings = [m for m in self.meetings if m['id'] != self.awaiting_meeting_cancel]
            self.awaiting_meeting_cancel = None
            return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if text == "–ù–µ—Ç":
            self.awaiting_meeting_cancel = None
            return MockResponse("–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        if text.startswith("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
            try:
                meet_id = int(text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id and m.get('past'))
                if meet_id in self.feedbacks:
                    return MockResponse("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏"])
                self.awaiting_feedback = meet_id
                self.awaiting_rating = True
                return MockResponse("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –≤—Å—Ç—Ä–µ—á–µ (1-5):", ["1", "2", "3", "4", "5"])
            except Exception:
                return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏"])
        if hasattr(self, 'awaiting_rating') and self.awaiting_rating and text in ("1", "2", "3", "4", "5"):
            self.feedbacks[self.awaiting_feedback] = {'rating': int(text), 'comment': None}
            self.awaiting_rating = False
            self.awaiting_comment = True
            return MockResponse("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—Å—Ç—Ä–µ—á–µ:", ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"])
        if hasattr(self, 'awaiting_comment') and self.awaiting_comment:
            if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                self.feedbacks[self.awaiting_feedback]['comment'] = ""
            else:
                self.feedbacks[self.awaiting_feedback]['comment'] = text
            self.awaiting_comment = False
            self.awaiting_feedback = None
            return MockResponse("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –ü—Ä–æ—Ñ–∏–ª—å
        if text == "–ü—Ä–æ—Ñ–∏–ª—å":
            profile = self.profile
            return MockResponse(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {profile['name']}\n–§–∞–º–∏–ª–∏—è: {profile['surname']}\n–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}", ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            self.awaiting_edit = 'name'
            return MockResponse("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_edit') and self.awaiting_edit == 'name':
            self.profile['name'] = text
            self.awaiting_edit = 'surname'
            return MockResponse("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_edit') and self.awaiting_edit == 'surname':
            self.profile['surname'] = text
            self.awaiting_edit = 'age'
            return MockResponse("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_edit') and self.awaiting_edit == 'age':
            try:
                self.profile['age'] = int(text)
            except Exception:
                pass
            self.awaiting_edit = None
            return MockResponse("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω", ["–ü—Ä–æ—Ñ–∏–ª—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        if text.startswith("_add_meeting "):
            # _add_meeting –ú–æ—Å–∫–≤–∞ 2024-06-10 18:00 [past]
            parts = text.split()
            city, date, time = parts[1], parts[2], parts[3]
            past = False
            if len(parts) > 4 and parts[4] == 'past':
                past = True
            self.meetings.append({'id': self.next_meeting_id, 'city': city, 'date': date, 'time': time, 'past': past})
            self.next_meeting_id += 1
            return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        if text == "_clear_meetings":
            self.meetings.clear()
            return MockResponse("–í—Å—Ç—Ä–µ—á–∏ –æ—á–∏—â–µ–Ω—ã")
        if text == "_clear_applications":
            self.application = None
            return MockResponse("–ó–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã")
        if text == "_reset":
            self.reset()
            return MockResponse("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

        return MockResponse(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        )

    async def click_button(self, button):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é"
        if button == "–í –º–µ–Ω—é":
            return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", ["–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        return await self.send_message(button)

@pytest_asyncio.fixture
async def bot_tester():
    tester = BotTester()
    tester.reset()
    return tester 
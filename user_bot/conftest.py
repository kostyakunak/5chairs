import pytest
import pytest_asyncio
from copy import deepcopy

class MockResponse:
    def __init__(self, text, keyboard=None, inline_keyboard=None):
        self.text = text
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—ã—á–Ω–æ–π, –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if inline_keyboard is not None:
            self.keyboard = inline_keyboard
        else:
            self.keyboard = keyboard or []
    def get_inline_keyboard(self):
        return self.keyboard
    @property
    def reply_keyboard(self):
        return self.keyboard

class BotTester:
    def __init__(self):
        self.reset()

    def reset(self):
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ "–º–∏–Ω–∏-–ë–î"
        self.profile = {'name': '–ò–≤–∞–Ω', 'surname': '–ò–≤–∞–Ω–æ–≤', 'age': 30}
        self.application = None  # {'city': ..., 'slot': ..., 'status': ...}
        self.meetings = []  # [{'id': ..., 'city': ..., 'date': ..., 'time': ..., 'past': bool}]
        self.next_meeting_id = 1
        self.awaiting_cancel = None
        self.awaiting_meeting_cancel = None
        self.awaiting_feedback = None  # meeting_id, –µ—Å–ª–∏ –∂–¥—ë–º –æ—Ç–∑—ã–≤
        self.awaiting_rating = None
        self.awaiting_comment = None
        self.feedbacks = {}  # meeting_id: {'rating': int, 'comment': str}
        self.is_registered = True
        self.is_approved = True
        self.cities_available = True
        self.slots_available = True
        self.state_stack = []  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤

    async def send_message(self, text):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if text in ("/start", "–°—Ç–∞—Ä—Ç", "start"):
            return MockResponse("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 5 Chairs!", inline_keyboard=["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])
        if text in ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"):
            return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", inline_keyboard=["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])
        if text == "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏":
            return MockResponse("–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "‚ùì –ü–æ–º–æ—â—å":
            return MockResponse("–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["–í –º–µ–Ω—é"])

        # FSM –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        if text in ("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"):
            self.state_stack = ["MainMenu"]
            self.awaiting_city = True
            return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", inline_keyboard=["üèôÔ∏è –ú–æ—Å–∫–≤–∞", "üèôÔ∏è –ü–∏—Ç–µ—Ä", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if hasattr(self, 'awaiting_city') and self.awaiting_city and text in ("üèôÔ∏è –ú–æ—Å–∫–≤–∞", "üèôÔ∏è –ü–∏—Ç–µ—Ä"):
            self.state_stack.append("City")
            if not getattr(self, 'slots_available', True):
                self.awaiting_city = False
                return MockResponse("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", inline_keyboard=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
            self.application = {'city': text, 'slot': None, 'status': 'select_slot'}
            self.awaiting_city = False
            self.awaiting_slot = True
            return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", inline_keyboard=["18:00", "19:00", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if hasattr(self, 'awaiting_slot') and self.awaiting_slot and text in ("18:00", "19:00"):
            self.state_stack.append("TimeSlot")
            self.application['slot'] = text
            self.application['status'] = 'confirm'
            self.awaiting_slot = False
            self.awaiting_confirm = True
            return MockResponse("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏", inline_keyboard=["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if hasattr(self, 'awaiting_confirm') and self.awaiting_confirm and text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            self.state_stack.append("ConfirmApp")
            self.application['status'] = 'pending'
            self.awaiting_confirm = False
            return MockResponse("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", inline_keyboard=["–í –º–µ–Ω—é"])
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            if self.state_stack:
                last = self.state_stack.pop()
                if last == "TimeSlot":
                    self.awaiting_slot = False
                    self.awaiting_city = True
                    return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", inline_keyboard=["üèôÔ∏è –ú–æ—Å–∫–≤–∞", "üèôÔ∏è –ü–∏—Ç–µ—Ä", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
                if last == "ConfirmApp":
                    self.awaiting_confirm = False
                    self.awaiting_slot = True
                    return MockResponse("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", inline_keyboard=["18:00", "19:00", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
                if last == "City":
                    self.awaiting_city = False
                    return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", inline_keyboard=["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])
            return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", inline_keyboard=["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])
        if text == "–í –º–µ–Ω—é":
            return MockResponse("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", inline_keyboard=["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"])

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–∑–∞–≥–ª—É—à–∫–∏)
        if text == "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏":
            return MockResponse("–ë–ª–∏–∂–∞–π—à–∏–µ/–ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ", "‚è≥ –ü—Ä–æ—à–µ–¥—à–∏–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            return MockResponse("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ":
            return MockResponse("–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Å—Ç—Ä–µ—á (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "‚è≥ –ü—Ä–æ—à–µ–¥—à–∏–µ":
            return MockResponse("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É":
            return MockResponse("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        if text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç":
            return MockResponse("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)", inline_keyboard=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])

        # –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏
        if text == "–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏":
            if not self.meetings:
                return MockResponse(
                    text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.',
                    inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                )
            keyboard = []
            lines = ['–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:']
            for meeting in self.meetings:
                line = f"{meeting['date']} {meeting['time']} ‚Äî {meeting['city']} (id={meeting['id']})"
                lines.append(line)
                if meeting.get('past') and meeting['id'] not in self.feedbacks:
                    keyboard.append(f'–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ {meeting["id"]}')
                keyboard.append(f'–î–µ—Ç–∞–ª–∏: {meeting["city"]}')
                keyboard.append(f'–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {meeting["id"]}')
            keyboard.append('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            return MockResponse(
                text='\n'.join(lines),
                inline_keyboard=keyboard
            )
        if text.startswith("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"):
            try:
                meet_id = int(text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id)
                self.awaiting_meeting_cancel = meet_id
                return MockResponse(
                    text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {meeting['date']} {meeting['time']} –≤ {meeting['city']}?",
                    inline_keyboard=['–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                )
            except Exception:
                return MockResponse(
                    text='–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                )
        if text == "–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å" and self.awaiting_meeting_cancel:
            self.meetings = [m for m in self.meetings if m['id'] != self.awaiting_meeting_cancel]
            self.awaiting_meeting_cancel = None
            return MockResponse(
                text='–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            )
        if text.startswith('–î–µ—Ç–∞–ª–∏:'):
            return MockResponse('–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏: ...', inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

        # –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        if text.startswith("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
            try:
                meet_id = int(text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id and m.get('past'))
                if meet_id in self.feedbacks:
                    return MockResponse("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
                self.awaiting_feedback = meet_id
                self.awaiting_rating = True
                return MockResponse("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –≤—Å—Ç—Ä–µ—á–µ (1-5):", ["1", "2", "3", "4", "5", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            except Exception:
                return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_rating') and self.awaiting_rating and text in ("1", "2", "3", "4", "5"):
            self.feedbacks[self.awaiting_feedback] = {'rating': int(text), 'comment': None}
            self.awaiting_rating = False
            self.awaiting_comment = True
            return MockResponse("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—Å—Ç—Ä–µ—á–µ:", ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if hasattr(self, 'awaiting_comment') and self.awaiting_comment:
            if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                self.feedbacks[self.awaiting_feedback]['comment'] = ""
            else:
                self.feedbacks[self.awaiting_feedback]['comment'] = text
            self.awaiting_comment = False
            self.awaiting_feedback = None
            return MockResponse("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        if text.startswith("_add_meeting "):
            parts = text.split()
            city, date, time = parts[1], parts[2], parts[3]
            past = False
            if len(parts) > 4 and parts[4] == 'past':
                past = True
            meeting = {
                'id': self.next_meeting_id,
                'city': city,
                'date': date,
                'time': time,
                'name': city,
                'past': past
            }
            self.meetings.append(meeting)
            self.next_meeting_id += 1
            return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        if text == "_clear_meetings":
            self.meetings.clear()
            return MockResponse("–í—Å—Ç—Ä–µ—á–∏ –æ—á–∏—â–µ–Ω—ã")
        if text == "_clear_applications":
            self.application = None
            return MockResponse("–ó–∞—è–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã")
        if text == "_reset":
            self.reset()
            return MockResponse("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

        # –û—à–∏–±–∫–∏ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text == '–û—à–∏–±–∫–∞' or text == 'Edge case':
            return MockResponse(
                text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.',
                inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            )
        return MockResponse(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        )

    async def click_button(self, button_text):
        # FSM –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
        if button_text in ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"):
            return await self.send_message(button_text)
        if button_text in ("üèôÔ∏è –ú–æ—Å–∫–≤–∞", "üèôÔ∏è –ü–∏—Ç–µ—Ä", "18:00", "19:00", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
            return await self.send_message(button_text)
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if button_text in ("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üì® –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å"):
            return await self.send_message(button_text)
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        if button_text in ("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ", "‚è≥ –ü—Ä–æ—à–µ–¥—à–∏–µ", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç"):
            return await self.send_message(button_text)
        # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç—Ä–µ—á
        if button_text.startswith('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É'):
            try:
                meet_id = int(button_text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id)
                self.awaiting_meeting_cancel = meet_id
                return MockResponse(
                    text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É {meeting["date"]} {meeting["time"]} –≤ {meeting["city"]}?',
                    inline_keyboard=['–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                )
            except Exception:
                return MockResponse('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        if button_text == '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å' and self.awaiting_meeting_cancel:
            self.meetings = [m for m in self.meetings if m['id'] != self.awaiting_meeting_cancel]
            self.awaiting_meeting_cancel = None
            return MockResponse('–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        if button_text.startswith('–î–µ—Ç–∞–ª–∏:'):
            return MockResponse('–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏: ...', inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        if button_text.startswith('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'):
            try:
                meet_id = int(button_text.split()[-1])
                meeting = next(m for m in self.meetings if m['id'] == meet_id and m.get('past'))
                if meet_id in self.feedbacks:
                    return MockResponse("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
                self.awaiting_feedback = meet_id
                self.awaiting_rating = True
                return MockResponse("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –≤—Å—Ç—Ä–µ—á–µ (1-5):", ["1", "2", "3", "4", "5", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            except Exception:
                return MockResponse("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if button_text in ("1", "2", "3", "4", "5") and hasattr(self, 'awaiting_rating') and self.awaiting_rating:
            self.feedbacks[self.awaiting_feedback] = {'rating': int(button_text), 'comment': None}
            self.awaiting_rating = False
            self.awaiting_comment = True
            return MockResponse("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—Å—Ç—Ä–µ—á–µ:", ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if button_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" and hasattr(self, 'awaiting_comment') and self.awaiting_comment:
            self.feedbacks[self.awaiting_feedback]['comment'] = ""
            self.awaiting_comment = False
            self.awaiting_feedback = None
            return MockResponse("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        if button_text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return MockResponse('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', inline_keyboard=['–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏', '–ü—Ä–æ—Ñ–∏–ª—å', '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
        return MockResponse('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', inline_keyboard=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])

@pytest_asyncio.fixture
async def bot_tester():
    tester = BotTester()
    tester.reset()
    return tester 
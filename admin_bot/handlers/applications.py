import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

logger = logging.getLogger(__name__)

from database.db import (
    is_admin, get_application, update_application_status,
    get_user_answers, get_user, get_user_application, pool, add_meeting_member, get_meeting,
    get_city, get_pending_applications_by_city, get_pending_applications_by_timeslot, get_available_dates_by_city_and_timeslot,
    get_active_cities, update_user, init_db, get_pool, get_compatible_users_for_meeting, create_meeting
)
from config import MAX_MEETING_SIZE
from services.notification_service import NotificationService
from admin_bot.states import ApplicationReviewStates, MeetingManagementStates

# Create router
router = Router()

# Applications command handler
@router.message(Command("applications"))
async def cmd_applications(message: Message, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    cities = await get_active_cities()
    if not cities:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
        return
    
    builder = InlineKeyboardBuilder()
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city['name'],
            callback_data=f"select_city_{city['id']}"
        ))
    builder.adjust(2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:",
        reply_markup=builder.as_markup()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data.startswith("select_city_"))
async def select_city_for_applications(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split('_')[-1])
    await state.update_data(city_id=city_id)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É")],
            [KeyboardButton(text="–ü–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É")],
            [KeyboardButton(text="Back to Menu")]
        ],
        resize_keyboard=True
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:",
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É
@router.message(F.text == "–ü–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É")
async def applications_by_oldest(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    data = await state.get_data()
    city_id = data.get('city_id')
    if not city_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /applications.")
        return
    applications = await get_pending_applications_by_city(city_id)
    if not applications:
        await message.answer("–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.")
        return
    applications = sorted(applications, key=lambda x: x['created_at'])
    builder = InlineKeyboardBuilder()
    for app in applications:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        parts = []
        if app.get('created_at'):
            parts.append(app['created_at'].strftime('%d.%m.%Y'))
        if app.get('note'):
            parts.append(f"[{app['note'][:20]}]")
        parts.append(f"{app['user_name']} {app['user_surname']} - {app['city_name']} {app['day_of_week']} {app['time'].strftime('%H:%M')}")
        btn_text = ' | '.join(parts)
        builder.add(InlineKeyboardButton(
            text=btn_text,
            callback_data=f"review_app_{app['id']}"
        ))
    builder.adjust(1)
    await message.answer(
        f"–í—Å–µ–≥–æ {len(applications)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.select_application)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É
@router.message(F.text == "–ü–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É")
async def applications_by_timeslot(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    data = await state.get_data()
    city_id = data.get('city_id')
    if not city_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /applications.")
        return
    applications = await get_pending_applications_by_city(city_id)
    if not applications:
        await message.answer("–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.")
        return
    slots = {}
    for app in applications:
        key = (app['day_of_week'], app['time'].strftime('%H:%M'))
        if key not in slots:
            slots[key] = []
        slots[key].append(app)
    builder = InlineKeyboardBuilder()
    for (day, time), apps in slots.items():
        builder.add(InlineKeyboardButton(
            text=f"{day} {time} ({len(apps)})",
            callback_data=f"slot_{day}_{time}"
        ))
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.filter_by_time)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É
@router.callback_query(ApplicationReviewStates.filter_by_time, F.data.startswith("slot_"))
async def show_applications_for_slot(callback: CallbackQuery, state: FSMContext):
    _, day, time = callback.data.split('_', 2)
    data = await state.get_data()
    city_id = data.get('city_id')
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É
    applications = await get_pending_applications_by_city(city_id)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
    filtered = [app for app in applications if app['day_of_week'] == day and app['time'].strftime('%H:%M') == time]
    if not filtered:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.")
        return
    filtered = sorted(filtered, key=lambda x: x['created_at'])
    builder = InlineKeyboardBuilder()
    for app in filtered:
        parts = []
        if app.get('created_at'):
            parts.append(app['created_at'].strftime('%d.%m.%Y'))
        if app.get('note'):
            parts.append(f"[{app['note'][:20]}]")
        parts.append(f"{app['user_name']} {app['user_surname']} - {app['city_name']} {app['day_of_week']} {app['time'].strftime('%H:%M')}")
        btn_text = ' | '.join(parts)
        builder.add(InlineKeyboardButton(
            text=btn_text,
            callback_data=f"review_app_{app['id']}"
        ))
    builder.adjust(1)
    await callback.message.edit_text(
        f"–ó–∞—è–≤–∫–∏ –Ω–∞ {day} {time} –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.select_application)

# Review applications handler
@router.message(F.text == "Review Applications")
async def review_applications_command(message: Message, state: FSMContext):
    try:
        if not await is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        applications = await get_pending_applications_by_city(city_id)
        if not applications:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
            return
        grouped_apps = {}
        for app in applications:
            key = f"{app['city_name']}_{app['day_of_week']}_{app['time'].strftime('%H:%M')}"
            if key not in grouped_apps:
                grouped_apps[key] = {
                    'city_name': app['city_name'],
                    'day_of_week': app['day_of_week'],
                    'time': app['time'],
                    'apps': []
                }
            grouped_apps[key]['apps'].append(app)
        builder = InlineKeyboardBuilder()
        for app in applications:
            builder.add(InlineKeyboardButton(
                text=f"üë§ {app['user_name']} {app['user_surname']}",
                callback_data=f"review_app_{app['id']}"
            ))
        for key, group in grouped_apps.items():
            if len(group['apps']) > 1:
                builder.add(InlineKeyboardButton(
                    text=f"üîÑ –ü–∞–∫–µ—Ç–Ω–æ ({len(group['apps'])}) - {group['city_name']} {group['day_of_week']} {group['time'].strftime('%H:%M')}",
                    callback_data=f"batch_review_{key}"
                ))
        builder.adjust(1)
        await message.answer(
            f"–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {len(applications)} –∑–∞—è–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(ApplicationReviewStates.select_application)
    except Exception as e:
        logger.error(f"[review_applications_command] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        await state.clear()
        return

# Application selection handler
@router.callback_query(ApplicationReviewStates.select_application, F.data.startswith("review_app_"))
async def process_application_selection(callback: CallbackQuery, state: FSMContext):
    try:
        app_id = int(callback.data.split("_")[2])
        await state.update_data(application_id=app_id)
        application = await get_application(app_id)
        if not application:
            logger.info(f"[process_application_selection] –ó–∞—è–≤–∫–∞ {app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            await state.clear()
            return
        user = await get_user(application['user_id'])
        if not user:
            logger.info(f"[process_application_selection] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {application['user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {app_id}.")
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            await state.clear()
            return
        logger.info(f"[process_application_selection] user_id={user['id']}, status={user['status']}, app_id={app_id}")
        answers = await get_user_answers(application['user_id'])
        if user['status'] != 'approved':
            logger.info(f"[process_application_selection] –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user['id']}, status={user['status']}")
            details = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['name']} {user['surname']}\n"
                f"Username: @{user['username'] or 'None'}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date'].strftime('%d.%m.%Y')}\n\n"
                f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
            )
            for i, answer in enumerate(answers, 1):
                details += f"{i}. {answer['question_text']}\n   –û—Ç–≤–µ—Ç: {answer['answer']}\n\n"
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="–ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"approve_user_{user['id']}"
            ))
            builder.add(InlineKeyboardButton(
                text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"reject_user_{user['id']}"
            ))
            builder.add(InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="back_to_applications"
            ))
            builder.adjust(1)
            await callback.message.edit_text(
                details,
                reply_markup=builder.as_markup()
            )
            await state.set_state(ApplicationReviewStates.review_application)
            return
        logger.info(f"[process_application_selection] –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user['id']}, status={user['status']}")
        details = ""
        if application.get('note'):
            details += f" [{application['note']}]\n"
        if application.get('created_at'):
            details += f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: {application['created_at'].strftime('%d.%m.%Y')}\n"
        details += (
            f"{user['name']} {user['surname']}\n"
            f"Username: @{user['username'] or 'None'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
            f"–ì–æ—Ä–æ–¥: {application['city_name']}\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç: {application['day_of_week']} {application['time'].strftime('%H:%M')}\n\n"
            f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
        )
        for i, answer in enumerate(answers, 1):
            details += f"{i}. {answer['question_text']}\n   –û—Ç–≤–µ—Ç: {answer['answer']}\n\n"
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ûï –í —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É",
            callback_data=f"show_meetings_{app_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ûï –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
            callback_data=f"approve_and_create_{app_id}_{application['city_id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_app_{app_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üìù –ó–∞–º–µ—Ç–∫–∞",
            callback_data=f"add_notes_{app_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_applications"
        ))
        builder.adjust(1)
        await callback.message.edit_text(
            details,
            reply_markup=builder.as_markup()
        )
        await state.set_state(ApplicationReviewStates.review_application)
        return
    except Exception as e:
        logger.error(f"[process_application_selection] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        await state.clear()
        return

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("show_meetings_"))
async def show_meetings_for_adding(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split("_")[-1])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    city_id = application['city_id']
    user_id = application['user_id']
    time_slot_id = application['time_slot_id']
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ —Å –Ω—É–∂–Ω—ã–º time_slot_id
    async with pool.acquire() as conn:
        meetings = await conn.fetch('''
            SELECT m.id, m.name, m.meeting_date, m.meeting_time,
                   (SELECT COUNT(*) FROM meeting_members WHERE meeting_id = m.id) as member_count
            FROM meetings m
            JOIN meeting_time_slots mts ON m.id = mts.meeting_id
            WHERE m.city_id = $1 AND m.status = 'planned' AND mts.time_slot_id = $2
            ORDER BY m.meeting_date, m.meeting_time
        ''', city_id, time_slot_id)
        # –ü–æ–ª—É—á–∞–µ–º id –≤—Å—Ç—Ä–µ—á, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç
        user_meeting_ids = set([row['meeting_id'] for row in await conn.fetch('SELECT meeting_id FROM meeting_members WHERE user_id = $1', user_id)])
    if not meetings:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É.")
        return
    builder = InlineKeyboardBuilder()
    for meeting in meetings:
        if meeting['id'] in user_meeting_ids:
            continue  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç
        member_count = meeting['member_count']
        if member_count <= MAX_MEETING_SIZE:
            dots = 'üî¥' * member_count + 'üü¢' * (MAX_MEETING_SIZE - member_count)
        else:
            dots = 'üî¥' * MAX_MEETING_SIZE + f'+{member_count - MAX_MEETING_SIZE}'
        name = meeting['name']
        if len(name) > 10:
            name = name[:10] + '...'
        button_text = f"{dots} {name} ({meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')})"
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"select_meeting_{app_id}_{meeting['id']}"
        ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"review_app_{app_id}"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.select_application)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(ApplicationReviewStates.select_application, F.data.startswith("select_meeting_"))
async def show_meeting_members_for_add(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[2])
    meeting_id = int(parts[3])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    async with pool.acquire() as conn:
        meeting = await conn.fetchrow('SELECT * FROM meetings WHERE id = $1', meeting_id)
        members = await conn.fetch('''
            SELECT u.id, u.name, u.surname, u.username, u.age
            FROM meeting_members mm
            JOIN users u ON mm.user_id = u.id
            WHERE mm.meeting_id = $1
            ORDER BY mm.added_at
        ''', meeting_id)
    text = (
        f"–í—Å—Ç—Ä–µ—á–∞: {meeting['name']}\n–î–∞—Ç–∞: {meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}/5):\n"
    )
    for i, member in enumerate(members, 1):
        text += f"{i}. {member['name']} {member['surname']} (@{member['username'] or '-'}), {member['age']} –ª–µ—Ç\n"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É",
        callback_data=f"approve_and_add_{app_id}_{meeting_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤—Å—Ç—Ä–µ—á",
        callback_data=f"show_meetings_{app_id}"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.select_application)

# approve_application ‚Äî —Ç–æ–ª—å–∫–æ approve –∑–∞—è–≤–∫–∏, –Ω–∏–∫–∞–∫–∏—Ö events
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("confirm_approve_"))
async def confirm_approve_application(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split("_")[2])
    await update_application_status(app_id, "approved", None)
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å—Ç—Ä–µ—á—É.")
    await state.clear()

# approve_and_add_to_meeting ‚Äî approve –∑–∞—è–≤–∫–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ meeting
@router.callback_query(ApplicationReviewStates.select_application, F.data.startswith("approve_and_add_"))
async def approve_and_add_to_meeting(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[3])
    meeting_id = int(parts[4])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    user_id = application['user_id']
    user = await get_user(user_id)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await update_application_status(app_id, "approved", None)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å—Ç—Ä–µ—á—É
    await add_meeting_member(meeting_id, user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_service = NotificationService(callback.bot)
    await notification_service.send_application_status_update(user_id, "approved", None, meeting_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async with pool.acquire() as conn:
        meeting = await conn.fetchrow('SELECT * FROM meetings WHERE id = $1', meeting_id)
    text = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} {user['surname']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Å—Ç—Ä–µ—á—É '{meeting['name']}'!\n"
        f"–î–∞—Ç–∞: {meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')}\n"
    )
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ö –∑–∞—è–≤–∫–∞–º",
        callback_data="back_to_applications"
    ))
    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.set_state(ApplicationReviewStates.select_application)

# approve_and_create_meeting ‚Äî approve –∑–∞—è–≤–∫–∏, —Å–æ–∑–¥–∞—Ç—å meeting, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("approve_and_create_"))
async def approve_and_create_meeting(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[3])
    city_id = int(parts[4])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    user = await get_user(application['user_id'])
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return
    data = await state.get_data()
    admin_notes = data.get('admin_notes', None)
    await update_application_status(app_id, "approved", admin_notes)
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
    meeting_name = data.get('meeting_name') or f"–í—Å—Ç—Ä–µ—á–∞ {user['name']} {user['surname']}"
    meeting_date = data.get('meeting_date') or datetime.now().date()
    meeting_time = data.get('timeslot_time') or application['time'].strftime('%H:%M')
    venue = data.get('venue_name') or "-"
    venue_address = data.get('venue_address', '')
    created_by = callback.from_user.id
    # –°–æ–∑–¥–∞—ë–º –≤—Å—Ç—Ä–µ—á—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    meeting_id = await create_meeting(
        name=meeting_name,
        meeting_date=meeting_date if not isinstance(meeting_date, str) else datetime.strptime(meeting_date, '%Y-%m-%d').date(),
        meeting_time=meeting_time if not isinstance(meeting_time, str) else datetime.strptime(meeting_time, '%H:%M').time(),
        city_id=city_id,
        venue=venue,
        created_by=created_by,
        venue_address=venue_address
    )
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç –∫ –≤—Å—Ç—Ä–µ—á–µ
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO meeting_time_slots (meeting_id, time_slot_id)
            VALUES ($1, $2)
        ''', meeting_id, application['time_slot_id'])
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    await add_meeting_member(meeting_id, user['id'], added_by=created_by)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_service = NotificationService(callback.bot)
    await notification_service.send_application_status_update(user['id'], "approved", admin_notes, meeting_id)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤—Å—Ç—Ä–µ—á—É",
        callback_data=f"view_meeting_{meeting_id}"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{meeting_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫ {user['name']} {user['surname']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Å—Ç—Ä–µ—á—É –∏ —É–≤–µ–¥–æ–º–ª—ë–Ω.",
        reply_markup=builder.as_markup()
    )
    await state.clear()
    await callback.answer()

# batch_review_callback ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ applications
@router.callback_query(ApplicationReviewStates.select_application, F.data.startswith("batch_review_"))
async def batch_review_callback(callback: CallbackQuery, state: FSMContext):
    key = callback.data[len("batch_review_"):]
    city_name, day_of_week, time = key.rsplit('_', 2)
    applications = await get_pending_applications_by_city(city_name)
    batch_apps = [app for app in applications if app['day_of_week'] == day_of_week and app['time'].strftime('%H:%M') == time]
    if not batch_apps:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.")
        await state.clear()
        return
    builder = InlineKeyboardBuilder()
    for app in batch_apps:
        builder.add(InlineKeyboardButton(
            text=f"üë§ {app['user_name']} {app['user_surname']}",
            callback_data=f"review_app_{app['id']}"
        ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_applications"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        f"–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫: {city_name}, {day_of_week} {time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ApplicationReviewStates.select_application)

# reject_application_callback ‚Äî —Ç–æ–ª—å–∫–æ applications
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("reject_app_"))
async def reject_application_callback(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split('_')[-1])
    await update_application_status(app_id, "rejected", None)
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ.")
    await state.clear()

# add_notes_callback –∏ process_admin_note ‚Äî —Ç–æ–ª—å–∫–æ applications
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("add_notes_"))
async def add_notes_callback(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split('_')[-1])
    await state.update_data(application_id=app_id)
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏:")
    await state.set_state(ApplicationReviewStates.enter_admin_note)

@router.message(ApplicationReviewStates.enter_admin_note)
async def process_admin_note(message: Message, state: FSMContext):
    note = message.text.strip()
    if not note:
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
        return
    data = await state.get_data()
    app_id = data.get('application_id')
    await update_application_status(app_id, None, note)  # —Ç–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–∫–∞
    await message.answer("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –∑–∞—è–≤–∫–µ...")
    # –í–º–µ—Å—Ç–æ fake_callback –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application = await get_application(app_id)
    if not application:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    user = await get_user(application['user_id'])
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return
    answers = await get_user_answers(application['user_id'])
    details = (
        f"–ó–∞—è–≤–∫–∞ –æ—Ç {user['name']} {user['surname']}\n"
        f"Username: @{user['username'] or 'None'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date'].strftime('%d.%m.%Y')}\n\n"
        f"–ì–æ—Ä–æ–¥: {application['city_name']}\n"
        f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç: {application['day_of_week']} {application['time'].strftime('%H:%M')}\n\n"
        f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
    )
    for i, answer in enumerate(answers, 1):
        details += f"{i}. {answer['question_text']}\n   –û—Ç–≤–µ—Ç: {answer['answer']}\n\n"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚ûï –í —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É",
        callback_data=f"show_meetings_{app_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ûï –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
        callback_data=f"approve_and_create_{app_id}_{application['city_id']}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"reject_app_{app_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üìù –ó–∞–º–µ—Ç–∫–∞",
        callback_data=f"add_notes_{app_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_applications"
    ))
    builder.adjust(1)
    await message.answer(details, reply_markup=builder.as_markup())
    await state.set_state(ApplicationReviewStates.review_application)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É"
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("approve_and_add_"))
async def approve_and_add_to_meeting(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[3])
    meeting_id = int(parts[4])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    user_id = application['user_id']
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    await update_application_status(app_id, "approved", None)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å—Ç—Ä–µ—á—É
    await add_meeting_member(meeting_id, user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_service = NotificationService(callback.bot)
    await notification_service.send_application_status_update(user_id, "approved", None, meeting_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async with pool.acquire() as conn:
        meeting = await conn.fetchrow('SELECT * FROM meetings WHERE id = $1', meeting_id)
    text = (
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} {user['surname']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Å—Ç—Ä–µ—á—É '{meeting['name']}'!\n"
        f"–î–∞—Ç–∞: {meeting['meeting_date'].strftime('%d.%m.%Y')} {meeting['meeting_time'].strftime('%H:%M')}\n"
    )
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ö –∑–∞—è–≤–∫–∞–º",
        callback_data="back_to_applications"
    ))
    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.set_state(ApplicationReviewStates.select_application)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("approve_and_create_"))
async def approve_and_create_meeting(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[3])
    city_id = int(parts[4])
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    user = await get_user(application['user_id'])
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return
    data = await state.get_data()
    admin_notes = data.get('admin_notes', None)
    await update_application_status(app_id, "approved", admin_notes)
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
    meeting_name = data.get('meeting_name') or f"–í—Å—Ç—Ä–µ—á–∞ {user['name']} {user['surname']}"
    meeting_date = data.get('meeting_date') or datetime.now().date()
    meeting_time = data.get('timeslot_time') or application['time'].strftime('%H:%M')
    venue = data.get('venue_name') or "-"
    venue_address = data.get('venue_address', '')
    created_by = callback.from_user.id
    # –°–æ–∑–¥–∞—ë–º –≤—Å—Ç—Ä–µ—á—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    meeting_id = await create_meeting(
        name=meeting_name,
        meeting_date=meeting_date if not isinstance(meeting_date, str) else datetime.strptime(meeting_date, '%Y-%m-%d').date(),
        meeting_time=meeting_time if not isinstance(meeting_time, str) else datetime.strptime(meeting_time, '%H:%M').time(),
        city_id=city_id,
        venue=venue,
        created_by=created_by,
        venue_address=venue_address
    )
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç –∫ –≤—Å—Ç—Ä–µ—á–µ
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO meeting_time_slots (meeting_id, time_slot_id)
            VALUES ($1, $2)
        ''', meeting_id, application['time_slot_id'])
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    await add_meeting_member(meeting_id, user['id'], added_by=created_by)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_service = NotificationService(callback.bot)
    await notification_service.send_application_status_update(user['id'], "approved", admin_notes, meeting_id)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤—Å—Ç—Ä–µ—á—É",
        callback_data=f"view_meeting_{meeting_id}"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{meeting_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫ {user['name']} {user['surname']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Å—Ç—Ä–µ—á—É –∏ —É–≤–µ–¥–æ–º–ª—ë–Ω.",
        reply_markup=builder.as_markup()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(ApplicationReviewStates.choose_meeting_date, F.data.startswith("create_meeting_date_"))
async def choose_meeting_date(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    selected_date = callback.data.split("_")[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ state
    await state.update_data(meeting_date=selected_date)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {data['user_name']}:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await state.set_state(ApplicationReviewStates.enter_meeting_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
@router.message(ApplicationReviewStates.enter_meeting_name)
async def enter_meeting_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    meeting_name = message.text.strip()
    
    if not meeting_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.")
        return
    
    await state.update_data(meeting_name=meeting_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    async with pool.acquire() as conn:
        venues = await conn.fetch('''
            SELECT id, name, address
            FROM venues
            WHERE city_id = $1 AND active = true
            ORDER BY name
        ''', data['city_id'])
    
    if not venues:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
        await message.answer(
            f"–í –≥–æ—Ä–æ–¥–µ {data['city_name']} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:"
        )
        await state.set_state(ApplicationReviewStates.enter_venue_manually)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—Ç–∞–º–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    for venue in venues:
        builder.add(InlineKeyboardButton(
            text=venue['name'],
            callback_data=f"select_venue_{venue['id']}"
        ))
    
    # –û–ø—Ü–∏—è –≤–≤–µ—Å—Ç–∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
    builder.add(InlineKeyboardButton(
        text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
        callback_data="enter_venue_manually"
    ))
    
    builder.add(InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_meeting_creation"
    ))
    
    builder.adjust(1)
    
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {meeting_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=builder.as_markup()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    await state.set_state(ApplicationReviewStates.choose_venue)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.callback_query(ApplicationReviewStates.choose_venue, F.data.startswith("select_venue_"))
async def select_venue(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    venue_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    async with pool.acquire() as conn:
        venue = await conn.fetchrow('''
            SELECT id, name, address
            FROM venues
            WHERE id = $1
        ''', venue_id)
    
    if not venue:
        await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    await state.update_data(
        venue_id=venue['id'],
        venue_name=venue['name'],
        venue_address=venue['address']
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await show_meeting_confirmation(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.callback_query(ApplicationReviewStates.choose_venue, F.data == "enter_venue_manually")
async def enter_venue_manually_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:")
    await state.set_state(ApplicationReviewStates.enter_venue_manually)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.message(ApplicationReviewStates.enter_venue_manually)
async def process_manual_venue(message: Message, state: FSMContext):
    venue_name = message.text.strip()
    
    if not venue_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.")
        return
    
    await state.update_data(venue_name=venue_name, venue_address="")
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∏–ª–∏ '-', –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
    await state.set_state(ApplicationReviewStates.enter_venue_address)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@router.message(ApplicationReviewStates.enter_venue_address)
async def process_venue_address(message: Message, state: FSMContext):
    venue_address = message.text.strip()
    
    if venue_address == '-':
        venue_address = ""
    
    await state.update_data(venue_address=venue_address)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await show_meeting_confirmation(message, state)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
async def show_meeting_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    meeting_info = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['meeting_name']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city_name']}\n"
        f"–î–∞—Ç–∞: {data['meeting_date']}\n"
        f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {data['timeslot_day']}\n"
        f"–í—Ä–µ–º—è: {data['timeslot_time']}\n"
        f"–ú–µ—Å—Ç–æ: {data['venue_name']}"
    )
    
    if data.get('venue_address'):
        meeting_info += f"\n–ê–¥—Ä–µ—Å: {data['venue_address']}"
    
    meeting_info += f"\n\n–£—á–∞—Å—Ç–Ω–∏–∫: {data['user_name']}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É",
        callback_data="confirm_create_meeting"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_meeting_creation"
    ))
    builder.adjust(1)
    
    await message.answer(
        f"{meeting_info}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=builder.as_markup()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await state.set_state(ApplicationReviewStates.confirm_meeting_creation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(ApplicationReviewStates.confirm_meeting_creation, F.data == "confirm_create_meeting")
async def confirm_create_meeting(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        async with pool.acquire() as conn:
            venue_id = data.get('venue_id')
            if not venue_id:
                venue_result = await conn.fetchrow('''
                    INSERT INTO venues (name, address, city_id, active)
                    VALUES ($1, $2, $3, true)
                    RETURNING id
                ''', data['venue_name'], data.get('venue_address', ''), data['city_id'])
                venue_id = venue_result['id']
            meeting_result = await conn.fetchrow('''
                INSERT INTO meetings (
                    name, city_id, meeting_date, meeting_time, 
                    venue, venue_address, status, created_by, created_at
                )
                VALUES (
                    $1, $2, $3, $4, $5, $6, 'planned', $7, NOW()
                )
                RETURNING id
            ''', 
            data['meeting_name'], 
            data['city_id'], 
            datetime.strptime(data['meeting_date'], '%Y-%m-%d').date() if isinstance(data['meeting_date'], str) else data['meeting_date'], 
            datetime.strptime(data['timeslot_time'], '%H:%M').time(), 
            data['venue_name'],
            data.get('venue_address', ''),
            callback.from_user.id)
            meeting_id = meeting_result['id']
            await conn.execute('''
                INSERT INTO meeting_time_slots (meeting_id, time_slot_id)
                VALUES ($1, $2)
            ''', meeting_id, data['time_slot_id'])
            await conn.execute('''
                INSERT INTO meeting_members (meeting_id, user_id, added_by, added_at, status)
                VALUES ($1, $2, $3, NOW(), 'confirmed')
            ''', meeting_id, data['user_id'], callback.from_user.id)
            logger.info(f"[confirm_create_meeting] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ meeting_id={meeting_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_id={data['user_id']}")
        notification_service = NotificationService(callback.bot)
        try:
            await notification_service.send_meeting_invitation(data['user_id'], meeting_id)
            logger.info(f"[confirm_create_meeting] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={data['user_id']}")
        except Exception as e:
            logger.error(f"[confirm_create_meeting] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ: {e}")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤—Å—Ç—Ä–µ—á—É",
            callback_data=f"view_meeting_{meeting_id}"
        ))
        builder.adjust(1)
        await callback.message.edit_text(
            f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{data['meeting_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫ {data['user_name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Å—Ç—Ä–µ—á—É –∏ —É–≤–µ–¥–æ–º–ª—ë–Ω.",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"[confirm_create_meeting] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏."
        )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data == "cancel_meeting_creation")
async def cancel_meeting_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Å—Ç—Ä–µ—á—É."
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
@router.callback_query(F.data.startswith("view_meeting_"))
async def view_meeting(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[2])
    meeting = await get_meeting(meeting_id)
    if not meeting:
        await callback.message.edit_text("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
    pool_obj = await get_pool()
    async with pool_obj.acquire() as conn:
        members = await conn.fetch('''
            SELECT u.id, u.name, u.surname, u.username, u.age
            FROM meeting_members mm
            JOIN users u ON mm.user_id = u.id
            WHERE mm.meeting_id = $1
            ORDER BY mm.added_at
        ''', meeting_id)
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
    city_name = meeting.get('city_name') or meeting.get('city', {}).get('name', '-')
    venue = meeting.get('venue') or (meeting.get('venue', {}).get('name') if isinstance(meeting.get('venue'), dict) else '-')
    meeting_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {meeting['name']}\n"
        f"–ì–æ—Ä–æ–¥: {city_name}\n"
        f"–î–∞—Ç–∞: {meeting['meeting_date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {meeting['meeting_time'].strftime('%H:%M')}\n"
        f"–ú–µ—Å—Ç–æ: {venue}\n"
        f"–°—Ç–∞—Ç—É—Å: {meeting['status']}\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}/{MAX_MEETING_SIZE}):\n"
    )
    for i, member in enumerate(members, 1):
        meeting_info += f"{i}. {member['name']} {member['surname']}"
        if member['username']:
            meeting_info += f" (@{member['username']})"
        meeting_info += f" - {member['age']} –ª–µ—Ç\n"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ö –∑–∞—è–≤–∫–∞–º",
        callback_data="back_to_applications"
    ))
    builder.adjust(1)
    await callback.message.edit_text(
        meeting_info,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤—Å—Ç—Ä–µ—á—É
@router.callback_query(F.data.startswith("add_more_members_"))
async def add_more_members(callback: CallbackQuery, state: FSMContext):
    meeting_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
    meeting = await get_meeting(meeting_id)
    
    if not meeting:
        await callback.message.edit_text("–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å—Ç—Ä–µ—á–∏ –≤ state
    await state.update_data(meeting_id=meeting_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    compatible_users = await get_compatible_users_for_meeting(meeting_id)
    
    if not compatible_users:
        await callback.message.edit_text(
            f"–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤—Å—Ç—Ä–µ—á—É '{meeting['name']}'.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    builder = InlineKeyboardBuilder()
    
    for user in compatible_users:
        builder.add(InlineKeyboardButton(
            text=f"{user['name']} {user['surname']} - {user['age']} –ª–µ—Ç",
            callback_data=f"add_user_to_meeting_{user['id']}_{meeting_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data=f"view_meeting_{meeting_id}"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤—Å—Ç—Ä–µ—á—É '{meeting['name']}':",
        reply_markup=builder.as_markup()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(ApplicationReviewStates.select_user_for_meeting)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤—Å—Ç—Ä–µ—á—É
@router.callback_query(ApplicationReviewStates.select_user_for_meeting, F.data.startswith("add_user_to_meeting_"))
async def confirm_add_user_to_meeting(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        user_id = int(parts[4])
        meeting_id = int(parts[5])
        user = await get_user(user_id)
        meeting = await get_meeting(meeting_id)
        if not user or not meeting:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return
        try:
            await add_meeting_member(meeting_id, user_id, added_by=callback.from_user.id)
            notification_service = NotificationService(callback.bot)
            await notification_service.send_meeting_invitation(user_id, meeting_id)
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö –∑–∞—è–≤–∫–∞–º",
                callback_data="back_to_applications"
            ))
            builder.adjust(1)
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} {user['surname']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Å—Ç—Ä–µ—á—É '{meeting['name']}'!",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"[confirm_add_user_to_meeting] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—Å—Ç—Ä–µ—á—É: {e}", exc_info=True)
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—Å—Ç—Ä–µ—á—É: {str(e)}"
            )
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"[confirm_add_user_to_meeting] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear()
        return

# Handle filter by time button
@router.callback_query(F.data == "filter_by_time")
async def filter_by_time_callback(callback: CallbackQuery, state: FSMContext):
    """Handle filter by time button callback"""
    await state.clear()
    
    # Call the filter_by_time_command function
    message = callback.message
    message.from_user = callback.from_user
    await filter_by_time_command(message, state)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è approve_user –∏ reject_user
@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("approve_user_"))
async def approve_user_callback(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split('_')[-1])
        logger.info(f"[approve_user_callback] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}")
        await update_user(user_id, status='approved')
        logger.info(f"[approve_user_callback] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'approved'")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –µ–≥–æ –∑–∞—è–≤–∫–∞–º–∏.", show_alert=True)
        data = await state.get_data()
        app_id = data.get('application_id')
        if app_id:
            logger.info(f"[approve_user_callback] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ app_id={app_id} –¥–ª—è user_id={user_id}")
            from aiogram.types import CallbackQuery as CQ
            new_callback_data = f"review_app_{app_id}"
            new_callback = CQ(
                id=callback.id,
                from_user=callback.from_user,
                chat_instance=callback.chat_instance,
                message=callback.message,
                data=new_callback_data,
                inline_message_id=None
            )
            await state.set_state(ApplicationReviewStates.select_application)
            await process_application_selection(new_callback, state)
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω. –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[approve_user_callback] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear()
        return

@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("reject_user_"))
async def reject_user_callback(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split('_')[-1])
        logger.info(f"[reject_user_callback] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}")
        await update_user(user_id, status='rejected')
        logger.info(f"[reject_user_callback] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'rejected'")
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ.")
        await state.clear()
    except Exception as e:
        logger.error(f"[reject_user_callback] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear()
        return

@router.callback_query(ApplicationReviewStates.review_application, F.data.startswith("reject_app_"))
async def reject_application_callback(callback: CallbackQuery, state: FSMContext):
    try:
        app_id = int(callback.data.split('_')[-1])
        logger.info(f"[reject_application_callback] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ app_id={app_id}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ 'rejected'
        await update_application_status(app_id, "rejected", None)
        logger.info(f"[reject_application_callback] –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ app_id={app_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'rejected'")
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ.")
        await state.clear()
    except Exception as e:
        logger.error(f"[reject_application_callback] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
        await state.clear()
        return

def back_to_application_kb(app_id):
    """Create a keyboard with a back button to application view"""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"view_application_{app_id}")
    return kb.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
@router.callback_query(F.data.startswith("use_today_date_"))
async def use_today_date(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(application['user_id'])
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
    city = await get_city(application['city_id'])
    if not city:
        await callback.message.edit_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    today = datetime.now().date()
    await state.update_data(
        meeting_date=today,
        user_id=user['id'], 
        city_id=city['id'], 
        app_id=app_id, 
        city_name=city['name'],
        user_name=f"{user['name']} {user['surname']}",
        time_slot_id=application['time_slot_id'],
        timeslot_day=application['day_of_week'],
        timeslot_time=application['time'].strftime('%H:%M')
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await callback.message.edit_text(
        f"–°–æ–∑–¥–∞—ë–º –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['name']} {user['surname']}.\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=back_to_application_kb(app_id)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    await state.set_state(ApplicationReviewStates.enter_meeting_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
@router.callback_query(F.data.startswith("select_another_timeslot_"))
async def select_another_timeslot(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    async with pool.acquire() as conn:
        timeslots = await conn.fetch('''
            SELECT * FROM timeslots
            WHERE active = true
            ORDER BY CASE
                WHEN day_of_week = 'Monday' THEN 1
                WHEN day_of_week = 'Tuesday' THEN 2
                WHEN day_of_week = 'Wednesday' THEN 3
                WHEN day_of_week = 'Thursday' THEN 4
                WHEN day_of_week = 'Friday' THEN 5
                WHEN day_of_week = 'Saturday' THEN 6
                WHEN day_of_week = 'Sunday' THEN 7
            END, time
        ''')
    
    if not timeslots:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    kb = InlineKeyboardBuilder()
    
    for slot in timeslots:
        slot_time = slot['time'].strftime('%H:%M')
        kb.button(
            text=f"{slot['day_of_week']}, {slot_time}",
            callback_data=f"set_timeslot_{app_id}_{slot['id']}"
        )
    
    kb.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"view_application_{app_id}")
    kb.adjust(1)  # –û–¥–∏–Ω —Å–ª–æ—Ç –≤ —Å—Ç—Ä–æ–∫–µ
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
@router.callback_query(F.data.startswith("set_timeslot_"))
async def set_new_timeslot(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    app_id = int(parts[2])
    time_slot_id = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    application = await get_application(app_id)
    if not application:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
    async with pool.acquire() as conn:
        timeslot = await conn.fetchrow('SELECT * FROM timeslots WHERE id = $1', time_slot_id)
    
    if not timeslot:
        await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º event —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–æ–º
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º event_id –∏–∑ event_application
        event_id = application['event_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º event —Å –Ω–æ–≤—ã–º time_slot_id
        await conn.execute('''
            UPDATE events 
            SET time_slot_id = $1
            WHERE id = $2
        ''', time_slot_id, event_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    updated_app = await get_application(app_id)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    await callback.message.edit_text(
        f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeslot['day_of_week']}, {timeslot['time'].strftime('%H:%M')}.\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤—Å—Ç—Ä–µ—á—É. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã..."
    )
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è approve_and_create_meeting
    from aiogram.types import CallbackQuery as CQ
    new_callback_data = f"approve_and_create_{app_id}_{application['city_id']}"
    new_callback = CQ(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        message=callback.message,
        data=new_callback_data,
        inline_message_id=None
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–æ–≤—ã–º callback
    await approve_and_create_meeting(new_callback, state)

# Function to register handlers with the dispatcher
def register_applications_handlers(dp):
    dp.include_router(router)

@router.callback_query(F.data == "back_to_applications")
async def back_to_applications_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_applications(callback.message, state)
    await callback.answer()
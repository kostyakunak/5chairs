"""add city_id to time_slots

Revision ID: c88cc5b4af66
Revises: 007_drop_events_and_event_applications
Create Date: 2025-05-12 10:34:47.518460

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c88cc5b4af66'
down_revision = '007_drop_events_and_event_applications'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_applications')
    op.drop_table('group_members')
    op.drop_table('events')
    op.drop_table('groups')
    op.drop_constraint('_date_time_slot_uc', 'available_dates', type_='unique')
    op.create_unique_constraint('_date_timeslot_uc', 'available_dates', ['date', 'time_slot_id'])
    op.drop_column('meeting_members', 'status')
    op.drop_constraint('_meeting_time_slot_uc', 'meeting_time_slots', type_='unique')
    op.create_unique_constraint('_meeting_timeslot_uc', 'meeting_time_slots', ['meeting_id', 'time_slot_id'])
    op.add_column('time_slots', sa.Column('city_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'time_slots', 'cities', ['city_id'], ['id'], ondelete='CASCADE')
    # После применения этой миграции необходимо вручную заполнить city_id для всех существующих таймслотов,
    # затем сделать поле NOT NULL отдельной миграцией.
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'time_slots', type_='foreignkey')
    op.drop_column('time_slots', 'city_id')
    op.drop_constraint('_meeting_timeslot_uc', 'meeting_time_slots', type_='unique')
    op.create_unique_constraint('_meeting_time_slot_uc', 'meeting_time_slots', ['meeting_id', 'time_slot_id'])
    op.add_column('meeting_members', sa.Column('status', sa.VARCHAR(), server_default=sa.text("'confirmed'::character varying"), autoincrement=False, nullable=True))
    op.drop_constraint('_date_timeslot_uc', 'available_dates', type_='unique')
    op.create_unique_constraint('_date_time_slot_uc', 'available_dates', ['date', 'time_slot_id'])
    op.create_table('groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('meeting_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('meeting_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('city_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('venue', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('venue_address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['city_id'], ['cities.id'], name='groups_city_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['admins.id'], name='groups_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='groups_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('events',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('events_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('city_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time_slot_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['city_id'], ['cities.id'], name='events_city_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['time_slot_id'], ['time_slots.id'], name='events_time_slot_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='events_pkey'),
    sa.UniqueConstraint('city_id', 'time_slot_id', 'date', name='uix_event'),
    postgresql_ignore_search_path=False
    )
    op.create_table('group_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('added_by', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['added_by'], ['admins.id'], name='group_members_added_by_fkey'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='group_members_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='group_members_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='group_members_pkey'),
    sa.UniqueConstraint('group_id', 'user_id', name='_group_user_uc')
    )
    op.create_table('event_applications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], name='event_applications_application_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='event_applications_event_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='event_applications_pkey'),
    sa.UniqueConstraint('application_id', 'event_id', name='uix_event_application')
    )
    # ### end Alembic commands ###